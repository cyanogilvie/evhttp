#!/usr/bin/env cftcl

package require tclsignal
package require platform
package require parse_args

interp alias {} ::parse_args {} ::parse_args::parse_args

parse_args $argv {
	-restore	{-enum {previous sane} -default previous}
	args		{-name cmd}
}

set restore_state_actions	{}
set exit					0

set chan_io {
	proc with_chan {var create use} {
		upvar 1 $var h
		set h	[uplevel 1 $create]
		try {
			uplevel 1 $use
		} on return {r o} - on break {r o} - on continue {r o} {
			dict incr o -level 1
			return -options $o $r
		} finally {
			if {[info exists h] && $h in [chan names]} {
				close $h
			}
		}
	}

	proc readtext fn          { with_chan h {open $fn r} {read $h} }
	proc writetext {fn value} { with_chan h {open $fn w} {puts -nonewline $h $value} }
}
eval $chan_io

proc sudo args { #<<<
	global root
	if {![info exists root]} {
		set root	[open |[list sudo [info nameofexecutable]] rb+]
		chan configure $root -encoding binary -translation binary
	}
	puts $root [encoding convertto utf-8 [string map [list %script% [list $args]] {
		catch %script% r o
		set resp [encoding convertto utf-8 [list $r $o]]
		puts -nonewline [string length $resp]\n$resp
		flush stdout
	}]]
	flush $root
	set bytes	[gets $root]
	if {$bytes eq ""} {
		if {[eof $root]} {
			puts stderr "Root child died"
			close $root
			unset root
			return
		}
	}
	if {![string is integer -strict $bytes]} {
		error "Root child sync error"
	}
	lassign [encoding convertfrom utf-8 [read $root $bytes]] r o
	return -options $o $r
}

#>>>
proc restore_state {} { #<<<
	global restore_state_actions exit

	foreach action [lreverse $restore_state_actions] {
		puts stderr "Running restore action:\t$action"
		set errors 0
		try $action on error {errmsg options} {
			puts stderr "Error processing restore action \"$action\": [dict get $options -errorinfo]"
			set errors	1
		}
		if {$errors} {
			set exit 2
		}
	}

	set restore_state_actions	{}
}

#>>>
proc clean_shutdown {} { #<<<
	global root exit

	restore_state

	close $root write
	read $root
	close $root

	exit $exit
}

#>>>
proc got_signal sig { #<<<
	if {$sig in {SIGTERM SIGINT}} {
		clean_shutdown
	}
}

#>>>

foreach sig {
	SIGINT
	SIGTERM
} {
	signal add $sig [list got_signal $sig]
}

sudo eval [string map [list \
	%chan_io%	$chan_io \
] { # Prepare sudo worker <<<
	package require tclsignal
	signal add SIGINT {}	;# Ignore SIGINT to let the parent cleanup properly

	chan configure stdout -buffering none -encoding binary -translation binary

	%chan_io%

	proc set_turbo state { #<<<
		if {[file readable /sys/devices/system/cpu/cpufreq/boost]} {
			writetext /sys/devices/system/cpu/cpufreq/boost $state
		} else {
			if {$state} {
				set mode "turbo enable\nquit"
			} else {
				set mode "turbo disable\nquit"
			}
			#with_chan h {open |[list i7z_rw_registers 2>@ stderr] w} {
			#	chan configure $h -buffering none -encoding binary -translation binary -blocking 1
			#	puts $h $mode
			#}
			set res	[exec echo $mode | i7z_rw_registers]
			if {[regexp {Turbo is now (Enabled|Disabled)} $res - newstate]} {
				set newstate
			} else {
				set res
			}
		}
	}

	#>>>
	proc get_turbo {} { #<<<
		if {[file readable /sys/devices/system/cpu/cpufreq/boost]} {
			readtext /sys/devices/system/cpu/cpufreq/boost
		} else {
			expr {
				![exec rdmsr 0x1a0 --bitfield 38:38]
			}
		}
	}

	#>>>
}]

#>>>
proc benchmark_mode script { #<<<
	global restore_state_actions exit restore

	try {
		switch -glob -- [platform::generic] {
			linux-* {
				# Disable turbo boost <<<
				if {$restore eq "sane"} {
					lappend restore_state_actions	[list sudo set_turbo 1]
				} else {
					lappend restore_state_actions	[list sudo set_turbo [sudo get_turbo]]
				}
				sudo set_turbo off
				# Disable turbo boost >>>

				# Disable frequency scaling <<<
				foreach governor [glob -nocomplain -type f /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor] {
					if {$restore eq "sane"} {
						lappend restore_state_actions [list sudo writetext $governor ondemand]
					} else {
						lappend restore_state_actions [list sudo writetext $governor [string trim [readtext $governor]]]
					}
					sudo writetext $governor performance
				}
				# Disable frequency scaling >>>

				# Set highest scheduling priority
				lappend restore_state_actions	[list sudo exec renice --priority [exec nice] [pid]]
				sudo exec renice --priority -20 [pid]


				# Disable hyperthreading (effectively by disabling sibling cores, preventing the kernel from scheduling tasks for them)
				set siblings	{}
				foreach core [glob -nocomplain -type d -directory /sys/devices/system/cpu -tails cpu*] {
					if {![regexp {^cpu[0-9]+$} $core]} continue
					if {[file readable /sys/devices/system/cpu/$core/online]} {
						if {$restore eq "sane"} {
							lappend restore_state_actions [list sudo writetext /sys/devices/system/cpu/$core/online 1]
						} else {
							lappend restore_state_actions [list sudo writetext /sys/devices/system/cpu/$core/online [string trim [readtext /sys/devices/system/cpu/$core/online]]]
						}
					}
					set sibs	[readtext /sys/devices/system/cpu/$core/topology/thread_siblings_list]
					dict lappend siblings $sibs $core
				}
				dict for {group cores} $siblings {
					set keep	[lmap core $cores {
						if {[file readable /sys/devices/system/cpu/$core/online]} continue
						set core
					}]
					if {$keep eq {}} {
						set keep	[list [lindex $cores 0]]
					}
					foreach core $cores {
						if {$core in $keep} continue
						sudo writetext /sys/devices/system/cpu/$core/online 0
					}
				}
			}

			default {
				puts stderr "Don't know the magic to set [platform::generic] up for repeatable benchmarking"
			}
		}

		uplevel 1 $script
	} finally {
		set exit 0
		restore_state
	}
}

#>>>
benchmark_mode {
	try {
		exec {*}$cmd <@ stdin >@ stdout 2>@ stderr
	} on error {errmsg options} {
		puts stderr "[dict get $options -errorcode]: $errmsg"
		set exit	1
	}
}

clean_shutdown

# vim: ft=tcl foldmethod=marker foldmarker=<<<,>>> ts=4 shiftwidth=4
